	neunet
	======

Neural network implementation with regularization, mini-batch gradient
descent and arbitrary numbers of layers. Currently very much a work in
progress.


Quick Guide
-----------

Usage:

	neunet <cmd> <arch> [OPTIONS] [<file>]

where <cmd> can be 'learn' for training the weights and 'solve' for predicting
new values using the trained weights. <arch> is a comma delimited set of integers
specifying the size of the layers of the neural network. For example, '2,3,1'
would indicate that there are 2 input value, 3 nodes in the first (and only)
hidden layer and 1 output value. Bias nodes are added to all layers apart from
the output layer so the example would contain 2+1, 3+1 and 1 nodes in each layer
if the bias nodes were counted.

Example:

	neunet learn 784,30,10 mnist_norm_train.txt > mnist_train.wts

	neunet solve 784,30,10 --weights=mnist_train.wts mnist_norm_test.txt > mnist_predict.txt

Options:

	--activation=sigmoid
		Activation function to be applied to each node in each layer. Can be
		either a single string (e.g. "sigmoid") that is applied across all
		layers, or a comma separated list of functions giving the activation
		for each layer (e.g. "tanh,tanh,sigmoid"). The number of functions
		specified must either be equal to 1 or to the number of layers (i.e.
		the number of hidden layers + 1).
		
	--bsize=1
		The batch size between weight updates.

	--lambda=1.0
		Regularization parameter (ignored when --reg=0).

	--lrate=1.0
		Learning rate for weight updates.

	--nepochs=1
		Number of epochs before the weights are output.

	--reg=0
		Boolean parameter indicating whether regularization should (1) or
		should not (0) be performed.

	--weights=rSQRT
		Either a file containing weights to be used or if 'rSQRT' is given then
		random weights are generated uniformally distributed between -1/sqrt(n)
		and 1/sqrt(n), where n is the number input nodes into the layer. Bias
		weights are initialized to zero. The format of the weights file is one
		weight per line, in the order:
		
		       input_bias[0]
		       input_bias[1]
		       input[0]hidden[0]
		       input[0]hidden[1]
		       .
		       .
		       hidden_bias[0]
		       hidden_bias[1]
		       hidden[0]output[0]
		       hidden[0]output[1]
		       .
		       .
		       hidden[n]output[n]


Installation
------------

wget https://github.com/mspopgen/neunet/releases/download/v${version}/neunet-${version}.tar.gz
tar -zxvf neunet-${version}.tar.gz
cd neunet-${version}

./configure
make
make install

Admin permissions may be required for the final 'make install' step. The installation
path may be changed with './configure --prefix=<path/to/dir>'

